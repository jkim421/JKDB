c
record.first.map { |record| self.new(record)}
record.first
House.parse_all(record)
record
c
House.new(record.first)
self
source_options.model_class.parse_all(record.first)
source_options.model_class
record
c
val
valk
c
val
c
val
c
val
c
source_options.primary_key
source_options
through_options
through_optoins
source_options
through_options.foreign_key
through_options.table_name
source_options.table_name
through_options.table_name
c
source_options.table_name
through_options.table_name
source_options.table_name
q
self.send(a)
a = through_options.foreign_key
self.owner_id
self.a
a.to_s
a.table_name
self.a
a = through_options.foreign_key
a = _
through_options.foreign_key
self[through_options.foreign_key]
self.through_options.foreign_key
self
through_options.foreign_key
c
self.class.through_options
self
through_options
c
through_options.foreign_key
self.owner_id
self.id
self
through_options.primary_key
through_options.table_name
"#{through_options.foreign_key}"
through_options.foreign_key
source_options.table_name
through_options.table_name
source_options.table_name
source_options
houses.foreign_key
through_options.foreign_key
through_options.primary_key
through_options.table_name
source_options.table_name
source_options
through_options
q
c
source_options
source_name.pluralize
source_name.table_name
source_name
through_name
source_name
through_name
through_options.table_name
through_options.model_class
through_options
through_options.table_name
through_options = @assoc_options[through_name]
@assoc_options
c
other_class_name
c
through_options.model_class
through_options = @assoc_options[through_name]
through_options.model_class
@assoc_options
source_name
c
@assoc_options
through_options = @assoc_options[through_name]
source_name
through_name
name
self
c
self.assoc_options
self.class
self
self.class.assoc_options
@assoc_options[Human]
through_options.model_class
through_options = @assoc_options[through_name]
through_options = @assoc_options[through_name][
through_options
name
source_name
@assoc_options[:human]
@assoc_options.human
@assoc_options
source_name
through_name
name
c
self.send(assoc.primary_key)
assoc.class_name.send(assoc.foreign_key)
assoc.class_name
@class_name
assoc
self
c
has_many
c
assoc.foreign_key
self
other_class_name
q
other_class_name.send(options.foreign_key)
other_class_name
options.foreign_key
self.send(options.foreign_key)
options.foreign_key
self
c
self
options
other_class_name
c
self
options
optoins
c
options
q
y
q
self
options.foreign_key
self.send(options.foreign_key)
options
c
options
self.table_name
other_class_name
self.table_name
self
c
self.tac
self
self.table_name
options
self.send(:owner_id)
options.foreign_key
self
c
self.table_name.singularize.camelcase
self.table_name
name
self
q
c
f
c
self
col_sym
col
self
self.send("#{col}", val)
val
col
c
k
c
col
c
q
self.send(options.foreign_key)
fkey
options
self.owner_id
self.name
self
se.f
self.nome
self.id
self
c
quit
    end
      record = model.where(options.primary_key => fkey)
      model = options.model_class
      fkey = self.send(options.foreign_key)
      options = BelongsToOptions.new(other_class_name, options)
    define_method(other_class_name) do
c
n
c
s
c
s
c
key_val = self.send(options.foreign_key)
options
optoins
options
model.where(options.primary_key => 1)
modeol.where(options.primary_key => 1)
options.primary_key
self.send(:foreign_key)
options
c
self.fkey
model
fkey
self
options
options.owner_id
options.fkey
fkey
Human.where(options.primary_key => fkey)
Human.where(id: 1)
c
options.primary_key
model
fkey
options
