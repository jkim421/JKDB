c
self.send(assoc.primary_key)
assoc.class_name.send(assoc.foreign_key)
assoc.class_name
@class_name
assoc
self
c
has_many
c
assoc.foreign_key
self
other_class_name
q
other_class_name.send(options.foreign_key)
other_class_name
options.foreign_key
self.send(options.foreign_key)
options.foreign_key
self
c
self
options
other_class_name
c
self
options
optoins
c
options
q
y
q
self
options.foreign_key
self.send(options.foreign_key)
options
c
options
self.table_name
other_class_name
self.table_name
self
c
self.tac
self
self.table_name
options
self.send(:owner_id)
options.foreign_key
self
c
self.table_name.singularize.camelcase
self.table_name
name
self
q
c
f
c
self
col_sym
col
self
self.send("#{col}", val)
val
col
c
k
c
col
c
q
self.send(options.foreign_key)
fkey
options
self.owner_id
self.name
self
se.f
self.nome
self.id
self
c
quit
    end
      record = model.where(options.primary_key => fkey)
      model = options.model_class
      fkey = self.send(options.foreign_key)
      options = BelongsToOptions.new(other_class_name, options)
    define_method(other_class_name) do
c
n
c
s
c
s
c
key_val = self.send(options.foreign_key)
options
optoins
options
model.where(options.primary_key => 1)
modeol.where(options.primary_key => 1)
options.primary_key
self.send(:foreign_key)
options
c
self.fkey
model
fkey
self
options
options.owner_id
options.fkey
fkey
Human.where(options.primary_key => fkey)
Human.where(id: 1)
c
options.primary_key
model
fkey
options
